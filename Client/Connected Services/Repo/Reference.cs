//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Repo {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Repo.IRepository")]
    public interface IRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetByKey", ReplyAction="http://tempuri.org/IRepository/GetByKeyResponse")]
        Client.Repo.Company GetByKey(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetByKey", ReplyAction="http://tempuri.org/IRepository/GetByKeyResponse")]
        System.Threading.Tasks.Task<Client.Repo.Company> GetByKeyAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetAll", ReplyAction="http://tempuri.org/IRepository/GetAllResponse")]
        Client.Repo.Company[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetAll", ReplyAction="http://tempuri.org/IRepository/GetAllResponse")]
        System.Threading.Tasks.Task<Client.Repo.Company[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/RemoveByKey", ReplyAction="http://tempuri.org/IRepository/RemoveByKeyResponse")]
        void RemoveByKey(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/RemoveByKey", ReplyAction="http://tempuri.org/IRepository/RemoveByKeyResponse")]
        System.Threading.Tasks.Task RemoveByKeyAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/Create", ReplyAction="http://tempuri.org/IRepository/CreateResponse")]
        void Create(Client.Repo.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/Create", ReplyAction="http://tempuri.org/IRepository/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(Client.Repo.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/Update", ReplyAction="http://tempuri.org/IRepository/UpdateResponse")]
        void Update(Client.Repo.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/Update", ReplyAction="http://tempuri.org/IRepository/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Client.Repo.Company company);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRepositoryChannel : Client.Repo.IRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RepositoryClient : System.ServiceModel.ClientBase<Client.Repo.IRepository>, Client.Repo.IRepository {
        
        public RepositoryClient() {
        }
        
        public RepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.Repo.Company GetByKey(string key) {
            return base.Channel.GetByKey(key);
        }
        
        public System.Threading.Tasks.Task<Client.Repo.Company> GetByKeyAsync(string key) {
            return base.Channel.GetByKeyAsync(key);
        }
        
        public Client.Repo.Company[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Client.Repo.Company[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void RemoveByKey(string key) {
            base.Channel.RemoveByKey(key);
        }
        
        public System.Threading.Tasks.Task RemoveByKeyAsync(string key) {
            return base.Channel.RemoveByKeyAsync(key);
        }
        
        public void Create(Client.Repo.Company company) {
            base.Channel.Create(company);
        }
        
        public System.Threading.Tasks.Task CreateAsync(Client.Repo.Company company) {
            return base.Channel.CreateAsync(company);
        }
        
        public void Update(Client.Repo.Company company) {
            base.Channel.Update(company);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Client.Repo.Company company) {
            return base.Channel.UpdateAsync(company);
        }
    }
}
